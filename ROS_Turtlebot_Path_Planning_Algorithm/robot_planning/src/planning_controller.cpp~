#include <iostream>
#include <robot_planning/graph.h>
#include <boost/thread.hpp>
#include <boost/date_time.hpp>
#include <opencv2/opencv.hpp>
#include <ros/package.h>
#include <ros/ros.h>
#include <std_msgs/Int16MultiArray.h>
#include <opencv2/highgui/highgui.hpp>
#include <robot_planning/gridPathGoal.h>
#include <robot_planning/goalStatus.h>
#include <robot_planning/cancelGoal.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>
#include <fstream>
//----------------------------------------
/* Prasun
#include <cv_bridge/cv_bridge.h>
#include <std_msgs/Int64.h>
#include <image_transport/image_transport.h>
*/
//----------------------------------------
#define DRAW_ROBOT_PATH 1
#define CANCEL_GOAL 1

#if(CANCEL_GOAL)
#include <actionlib_msgs/GoalID.h>
#endif

using namespace std;

#define NO_OF_ROBOTS    1


bool removeElementFromVector(vector<int> &array,int value)
{
    int index = 0;
    bool result = false;
    for(int i=0;i<array.size();i++)
    {
        if(value==array[i])
        {
            index = i;
            result = true;

        }
    }

    if(result)
    {
        vector<int> temp(array.begin(),array.end());
        array.clear();

        for(int i=0;i<temp.size();i++)
        {
            if(i!=index)
            {
                array.push_back(temp[i]);
            }
        }
    }
    return result;
}

void callbackFunction(int event, int x, int y, int flags, void *gridNumber)
{
    vector<cv::Rect> gridVector;
    cv::Rect tempRect;

    int* gridIndex = ((int*) gridNumber);

    tempRect.x = 0;
    tempRect.y = 0;
    tempRect.width = 80;
    tempRect.height = 80;

    for(int i=0;i<8;i++)
    {
        for(int j=0;j<8;j++)
        {
            tempRect.x = i*80;
            tempRect.y = j*80;
            gridVector.push_back(tempRect);
        }
    }


    if(event == CV_EVENT_LBUTTONDBLCLK)
    {
        cout << "Grid clicked \t" << x << "\t" << y << endl;
        for(int i=0;i<64;i++)
        {
            if(gridVector[i].contains(cv::Point(y,x)))
            {
                cout << "Grid number \t" << i << endl;

                gridIndex[0] = i;
                gridIndex[1] = -1;
                break;
            }
        }
    }
    else if(event == CV_EVENT_RBUTTONDOWN)
    {
        cout << "Grid Added \t" << x << "\t" << y << endl;
        for(int i=0;i<64;i++)
        {
            if(gridVector[i].contains(cv::Point(y,x)))
            {
                cout << "Grid number \t" << i << endl;

                gridIndex[0] = i;
                gridIndex[1] = 1;
                cout << "Grid number \t" << i << endl;
                break;
            }
        }
    }

    return;
}


class Global_Planner{

private:
    vector<int> startPosition;
    vector<int> endPosition;
    vector<int> currentStateOfRobots;
    vector<ros::ServiceClient> roboGoalService;
    vector<ros::ServiceClient> cancelGoalService;
    int blocked_grid;
    ifstream grid_coordinateFile;
    vector< vector<double> > grid_coordinates;
    ros::NodeHandle nh;
    string gridPath;
    cv::Mat image;
    cv::Mat numbered_image;
    vector< vector<double> > imageGridCenters;
    vector<cv::Scalar> colorVector;
    vector<int> blocked_grid_array;
    int grid_num_status[2];
    cv::VideoWriter writer;


protected:
public:
    boost::thread_group threads;
    boost::thread th_mouse;
    boost::thread th_replan;
    boost::thread th_robot_pose;
    //    vector<boost::thread> thread_array;
    vector< vector<int> > robot_goal_states;
    vector< vector<int> > visited_goal_states;
    int stop_count;

    Graph *graph;

    Global_Planner();
    ~Global_Planner();
    void pathPublisherForRobot(int robot_id);
    void planner_mouseCallback();
    void replanner_callback();
    void updateRobotPositions();
    void update_callback(const geometry_msgs::PoseWithCovarianceStampedConstPtr &msg, int index);

    //-------------------------------------------------
/* Prasun
    std_msgs::Int64 grid_msg;
    ros::Publisher grid_number_publisher;
    image_transport::Publisher image_pub;
*/
    //-------------------------------------------------
    //    void callbackFunction(int event, int x, int y, int flags, void *gridNumber);


};

Global_Planner::Global_Planner()
{

    //--------------------------------------------------
/* Prasun
    grid_number_publisher = nh.advertise<std_msgs::Int64>("grid_no_publisher", 3);
    image_transport::ImageTransport it(nh);
    image_pub = it.advertise("grid_image", 1);
*/
    //--------------------------------------------------
    string videoPath = ros::package::getPath("robot_planning").append("/data/gridVideo.avi");
    writer.open(videoPath.c_str(),CV_FOURCC('M','J','P','G'),10,cv::Size(640,640),true);
    stop_count = 0;
    visited_goal_states = vector<vector<int> >(int(NO_OF_ROBOTS));

    grid_num_status[0] = -1;
    grid_num_status[1] = 1;
    colorVector.push_back(cv::Scalar(255,0,0));
    colorVector.push_back(cv::Scalar(0,255,0));
    colorVector.push_back(cv::Scalar(0,0,255));
    colorVector.push_back(cv::Scalar(255,0,255));
    gridPath = ros::package::getPath("robot_planning").append("/data/grid.jpg");

    image = cv::imread(gridPath.c_str());
    imageGridCenters = vector<vector<double> >(int(NO_OF_GRIDS),vector<double>(2,0));    

    for(int i=0;i<8;i++)
    {
        for(int j=0;j<8;j++)
        {
            imageGridCenters[i*8+j][0] = 40+j*80;
            imageGridCenters[i*8+j][1] = 40+i*80;
            char temp[200];
            //            cout << i*8+j << "\t" << 40+j*80 << "," << 40+i*80 << endl;
            sprintf(temp,"%d",i*8+j);
            cv::putText(image,temp,cv::Point(5+j*80,20+i*80),1,1.3,cv::Scalar(0,0,255),1,10,0);
            //            cv::imshow("im",image);
            //            cv::waitKey(0);
        }
    }

    numbered_image = image.clone();

    currentStateOfRobots = vector<int>(int(NO_OF_ROBOTS));
    string dataPath= ros::package::getPath("robot_planning").append("/data/gridCoordinates.txt");

    grid_coordinateFile.open(dataPath.c_str());
    if(!grid_coordinateFile.is_open())
    {
        ROS_INFO("Error opening file");
        exit(0);
    }

    grid_coordinates = vector<vector<double> >(int(NO_OF_GRIDS),vector<double>(2,0));

    for(int i=0;i<int(NO_OF_GRIDS);i++)
    {
        for(int j=0;j<2;j++)
        {
            grid_coordinateFile >> grid_coordinates[i][j];
        }
    }


    robot_goal_states = vector< vector<int> >(int(NO_OF_ROBOTS));
    graph = new Graph();

    // Assiging values from initially blocked grids to blocked_grid_array from crossing the grid map.
    blocked_grid_array.assign( graph->tempBlockedGrids.begin(), graph->tempBlockedGrids.end() );

    blocked_grid = -1;
    /*
     * Initialising starting point of each robot
     */
    startPosition = vector<int>(int(NO_OF_ROBOTS));


    //    startPosition[0] = 63;
    startPosition[0] = 0 ;
    startPosition[1] = 7;
    startPosition[2] = 63;
    startPosition[3] = 57;

    currentStateOfRobots[0] = startPosition[0];
    currentStateOfRobots[1] = startPosition[1];
    currentStateOfRobots[2] = startPosition[2];
    currentStateOfRobots[3] = startPosition[3];

    endPosition = vector<int>(int(NO_OF_ROBOTS));

    //    endPosition[0] = 8;
    endPosition[0] = 62 ;
    endPosition[1] = 56 ;
    endPosition[2] = 8  ;
    endPosition[3] = 6;


    // Initialsaing cancel goal Service for each robot
    cancelGoalService = vector<ros::ServiceClient>(int(NO_OF_ROBOTS));
    for(int i=0;i<int(NO_OF_ROBOTS);i++)
    {
        char robot_topic_name[200];
        sprintf(robot_topic_name,"/Robot%d/cancelGoal",i+1);
        cancelGoalService[i] = nh.serviceClient<robot_planning::cancelGoal>(robot_topic_name);
    }

    // Creating service for sending set of goals to nav_client

    roboGoalService = vector<ros::ServiceClient>(int(NO_OF_ROBOTS));
    for(int i=0;i<int(NO_OF_ROBOTS);i++)
    {
        char robot_topic_name[200];
        sprintf(robot_topic_name,"/Robot%d/goalNodesList",i+1);
        roboGoalService[i] = nh.serviceClient<robot_planning::gridPathGoal>(robot_topic_name);
    }

    // Creating one thread for each robot

    //    thread_array = vector<boost::thread>(int(NO_OF_ROBOTS));

    for(int i=0;i<int(NO_OF_ROBOTS);i++)
    {
        //        boost::thread th(&Global_Planner::pathPublisherForRobot,this,i);
//        if(i==2 || i==1)
//        {
            threads.add_thread(new boost::thread(&Global_Planner::pathPublisherForRobot,this,i));
            //        th.join();
            threads.join_all();
//        }


    }



    // Creating a new thread for callback function
    th_mouse = boost::thread(&Global_Planner::planner_mouseCallback,this);

    //    th_mouse.start_thread();
    //    th_mouse.detach();



    cout << "Mouse thread joined \t" << endl;

    //    threads.add_thread(new boost::thread(&Global_Planner::planner_mouseCallback,this));

    //    // Creating a new thread for replanning the path and checking blocked grid
    //    threads.add_thread(new boost::thread(&Global_Planner::replanner_callback,this));
    //    th_replan = boost::thread(&Global_Planner::replanner_callback,this);


    // Creating a thread for spinning topics for updating the robot position
    th_robot_pose = boost::thread(&Global_Planner::updateRobotPositions,this);

}

Global_Planner::~Global_Planner()
{

    th_mouse.join();
    th_replan.join();
    th_robot_pose.join();
    threads.join_all();
}

void Global_Planner::update_callback(const geometry_msgs::PoseWithCovarianceStampedConstPtr &msg, int id)
{
    double x = msg->pose.pose.position.x;
    double y = msg->pose.pose.position.y;

    vector<double> distArray;
    for(int i=0;i<grid_coordinates.size();i++)
    {
        double temp = sqrt(pow((grid_coordinates[i][0]-x),2)+pow((grid_coordinates[i][1]-y),2));
        distArray.push_back(temp);
    }

    double temp = 1000.0;
    int index = 0;
    for(int i=0;i<distArray.size();i++)
    {
        if(distArray[i] < temp)
        {
            index = i;
            temp = distArray[i];
        }
    }

    //    cout << index << "\t" << id << "\t" << imageGridCenters[index][0] << "\t" << imageGridCenters[index][1] <<  endl;
    currentStateOfRobots[id] = index;
    startPosition[id] = index;
    visited_goal_states[id].push_back(index);

    //    cv::circle(image,cv::Point(imageGridCenters[index][0],imageGridCenters[index][1]),10,colorVector[id],CV_FILLED,8,0);

    return;
}

void Global_Planner::updateRobotPositions()
{
    //    vector<ros::Subscriber> sub_array;
    //    for(int i=0;i<int(NO_OF_ROBOTS);i++)
    //    {
    //        char s[200];
    //        sprintf(s,"/robo%d/amcl_pose",i);
    //        sub_array[i] = nh.subscribe(s,1,callback)
    //    }

    int ind = 0;
    vector<ros::Subscriber> robo_sub(int(NO_OF_ROBOTS));
    for(int i=0;i<int(NO_OF_ROBOTS);i++)
    {

        char s[200];
        sprintf(s,"/Robot%d/amcl_pose",i+1);
        robo_sub[i] = nh.subscribe<geometry_msgs::PoseWithCovarianceStamped>
                (s,1,boost::bind(&Global_Planner::update_callback,this,_1,i));
        //    ros::Subscriber robo1_sub = nh.subscribe<geometry_msgs::PoseWithCovarianceStamped>
        //            ("/Robo1/amcl_pose",1,boost::bind(&Global_Planner::update_callback,this,_1,1));
        //    ros::Subscriber robo2_sub = nh.subscribe<geometry_msgs::PoseWithCovarianceStamped>
        //            ("/Robo2/amcl_pose",1,boost::bind(&Global_Planner::update_callback,this,_1,2));
        //    ros::Subscriber robo3_sub = nh.subscribe<geometry_msgs::PoseWithCovarianceStamped>
        //            ("/Robo3/amcl_pose",1,boost::bind(&Global_Planner::update_callback,this,_1,3));
        //    ros::Subscriber robo4_sub = nh.subscribe<geometry_msgs::PoseWithCovarianceStamped>
        //            ("/Robo4/amcl_pose",1,boost::bind(&Global_Planner::update_callback,this,_1,4));
    }


    //    ros::MultiThreadedSpinner spinner(4);

    //    spinner.spin();

    ros::spin();
    return ;

}

/*void Global_Planner::gridNoPublisher(int grid_no)
{
    ros::Publisher grid_number_publisher = nh.advertise<std_msgs::Int64>("grid_no_publisher", 3);
    grid_number_publisher.publish(grid_no);
    ros::spin();
    return;
}*/

void Global_Planner::pathPublisherForRobot(int robot_id)
{

    ROS_INFO("Robot %d start position is %d",robot_id,currentStateOfRobots[robot_id]);
    robot_planning::gridPathGoal goalService;
    graph->findShortestPathBetweenTwoNodes(currentStateOfRobots[robot_id],endPosition[robot_id]);
    for(int i=1;i<graph->pathNodeList.size();i++)
        goalService.request.goalList.data.push_back(graph->pathNodeList[i]);

    robot_goal_states[robot_id].clear();
    robot_goal_states[robot_id] = graph->pathNodeList;

    visited_goal_states[robot_id].clear();

    if(graph->pathNodeList.size() > 2)
    {


        //        if(stop_count==0)
        {

            if(roboGoalService[robot_id].call(goalService))
            {
                ROS_INFO("Robot Goal sent to the nav_client successfully for robot %d",robot_id);
            }
            else
            {
                ROS_ERROR("Nav_client can't be reached for robot %d",robot_id);
            }
            stop_count++;
        }

    }
    //    boost::this_thread::sleep_for(boost::chrono::seconds(0));

    return;
}

void Global_Planner::planner_mouseCallback()
{
    ROS_INFO("Inside planner mouse callback");


    while(1)
    {
#if(DRAW_ROBOT_PATH)
        image = numbered_image.clone();

        //Crossing the grid.

        for(int i=0;i<blocked_grid_array.size();i++)
        {
            cv::line(image,cv::Point(imageGridCenters[blocked_grid_array[i]][0]-40,imageGridCenters[blocked_grid_array[i]][1]-40),
                     cv::Point(imageGridCenters[blocked_grid_array[i]][0]+40,imageGridCenters[blocked_grid_array[i]][1]+40)
                     ,cv::Scalar(0,0,0),2,8,0);
            cv::line(image,cv::Point(imageGridCenters[blocked_grid_array[i]][0]-40,imageGridCenters[blocked_grid_array[i]][1]+40),
                     cv::Point(imageGridCenters[blocked_grid_array[i]][0]+40,imageGridCenters[blocked_grid_array[i]][1]-40)
                     ,cv::Scalar(0,0,0),2,8,0);
        }

        for(int id=0;id<int(NO_OF_ROBOTS);id++)
        {
            if(robot_goal_states[id].size() > 2)
            {
                //Circles to show start and end point.
                cv::circle(image,cv::Point(imageGridCenters[robot_goal_states[id][0]][0],
                                           imageGridCenters[robot_goal_states[id][0]][1]),
                           10,colorVector[id],CV_FILLED,8,0);
                for(int i=0;i<robot_goal_states[id].size()-1;i++)
                {
                    int grid_index = robot_goal_states[id][i];
                    int grid_index_next = robot_goal_states[id][i+1];
                    //        cout << robot_goal_states[robot_id][i] <<  "\t" <<
                    //                cv::Point(imageGridCenters[i][0],imageGridCenters[i][1]) << "\t" <<
                    //                                       cv::Point(imageGridCenters[i+1][0],imageGridCenters[i+1][1]) <<
                    //                                                                                                   endl;
                    //        if(robot_id == 0)
                    cv::line(image,cv::Point(imageGridCenters[grid_index][0]+4*id,imageGridCenters[grid_index][1]+4*id),
                             cv::Point(imageGridCenters[grid_index_next][0]+4*id,imageGridCenters[grid_index_next][1]+4*id),
                             colorVector[id],2,8,0);
                }

                char start[200],end[200];
                sprintf(start,"S_%d",id);
                sprintf(end,"E_%d",id);

                cv::putText(image,start,cv::Point(imageGridCenters[robot_goal_states[id][0]][0],
                                                  imageGridCenters[robot_goal_states[id][0]][1]),1,1,cv::Scalar(0,0,0),2,10,0);
                cv::putText(image,end,cv::Point(imageGridCenters[robot_goal_states[id][robot_goal_states[id].size()-1]][0],
                                                imageGridCenters[robot_goal_states[id][robot_goal_states[id].size()-1]][1]),1,1,
                            cv::Scalar(0,0,0),2,10,0);
                for(int yd=0;yd<visited_goal_states[id].size();yd++)
                {
                    cv::circle(image,cv::Point(imageGridCenters[visited_goal_states[id][yd]][0],imageGridCenters[visited_goal_states[id][yd]][1]),10,colorVector[id],CV_FILLED,8,0);
                }

            }
        }
#endif
        //----------------------------------------------------------
/* Prasun
        sensor_msgs::ImagePtr grid_image = cv_bridge::CvImage(std_msgs::Header(), "bgr8", image).toImageMsg();
        ros::Rate loop_rate(5);
        image_pub.publish(grid_image);
*/
        //----------------------------------------------------------

        cv::namedWindow("Grid Window");


        cv::setMouseCallback("Grid Window",callbackFunction,grid_num_status);

        cv::imshow("Grid Window",image);
        writer.write(image);
        cv::waitKey(1);
        char c1 = (char)cv::waitKey(5);
        if(c1 == '\x1b')
        {
            writer.release();

            exit(0);
        }
        //        cv::destroyAllWindows();


        if(grid_num_status[0] >= 0 && grid_num_status[1] == -1 /*&& blocked_grid!=endPosition[0]&&blocked_grid!=endPosition[1] && blocked_grid!=endPosition[2]
                                        && blocked_grid!=endPosition[3]*/)
        {

            bool res= findElementInVector(blocked_grid_array,grid_num_status[0]);

            if(!res)
            {
                blocked_grid_array.push_back(grid_num_status[0]);



                ROS_INFO("Grid %d has been blocked ",grid_num_status[0]);
                for(int i=0;i<64;i++)
                {
                    graph->adj_matrix[grid_num_status[0]][i] = 1000;
                    graph->adj_matrix[i][grid_num_status[0]] = 1000;
                }
/* Prasun
                grid_msg.data = grid_num_status[0];
                grid_number_publisher.publish(grid_msg);
*/
                for(int i=0;i<int(NO_OF_ROBOTS);i++)
                {
                    if(findElementInVector(robot_goal_states[i],grid_num_status[0]))
                    {

                        robot_planning::cancelGoal cancelSrv;
                        cancelSrv.request.cancelStatus.data = true;

                        if(cancelGoalService[i].call(cancelSrv))
                        {
                            cout << "Cancelled" << endl;
                            boost::thread th_robo(&Global_Planner::pathPublisherForRobot,this,i);
                            th_robo.join();
                        }
                        else
                        {
                            cout << "cancel service can not be called \t" << endl;
                        }



                        //                    threads.add_thread(new boost::thread(&Global_Planner::pathPublisherForRobot,this,i));
                        //                    threads.join_all();
                    }
                }

            }
            grid_num_status[0] = -1;

        }
        else if(grid_num_status[0] >= 0 && grid_num_status[1] == 1)
        {
            // Find if this grid is blocked or not
            bool find_result = removeElementFromVector(blocked_grid_array,grid_num_status[0]);

            if(find_result)
            {
                ROS_INFO("Grid %d has been blocked ",grid_num_status[0]);
                for(int i=0;i<64;i++)
                {
                    graph->adj_matrix[grid_num_status[0]][i] = graph->adj_matrix_unchanged[grid_num_status[0]][i];
                    graph->adj_matrix[i][grid_num_status[0]] =  graph->adj_matrix_unchanged[i][grid_num_status[0]];
                }
            }

            grid_num_status[0] = -1;


        }
    }


    return;
}

void Global_Planner::replanner_callback()
{
    while(1)
    {
        //        cout << "Blocked grid \t" << blocked_grid << endl;
        if(grid_num_status[0] >= 0)
        {
            ROS_INFO("Grid %d has been blocked ",grid_num_status[0]);
            for(int i=0;i<64;i++)
            {
                graph->adj_matrix[grid_num_status[0]][i] = 1000;
                graph->adj_matrix[i][grid_num_status[0]] = 1000;
            }

            for(int i=0;i<int(NO_OF_ROBOTS);i++)
            {
                if(findElementInVector(robot_goal_states[i],grid_num_status[0]))
                {

                    boost::thread th_robo(&Global_Planner::pathPublisherForRobot,this,i);
                    th_robo.join();
                    //                    threads.add_thread(new boost::thread(&Global_Planner::pathPublisherForRobot,this,i));
                    //                    threads.join_all();
                }
            }
            grid_num_status[0] = -1;

        }

    }

}


//void Global_Planner::callbackFunction(int event, int x, int y, int flags, void *gridNumber)
//{
//    vector<cv::Rect> gridVector;
//    cv::Rect tempRect;

//    int* gridIndex = (int*) gridNumber;

//    tempRect.x = 0;
//    tempRect.y = 0;
//    tempRect.width = 80;
//    tempRect.height = 80;

//    for(int i=0;i<8;i++)
//    {
//        for(int j=0;j<8;j++)
//        {
//            tempRect.x = i*80;
//            tempRect.y = j*80;
//            gridVector.push_back(tempRect);
//        }
//    }


//    if(event == CV_EVENT_LBUTTONDBLCLK)
//    {
//        cout << "Grid clicked \t" << x << "\t" << y << endl;
//        for(int i=0;i<64;i++)
//        {
//            if(gridVector[i].contains(cv::Point(y,x)))
//            {
//                blocked_grid = i;
//                cout << "Grid number \t" << i << endl;
//                break;
//            }
//        }
//    }

//    return;
//}


int main(int argc, char **argv)
{

    ros::init(argc,argv,"global_planner");
    // Create a graph with V nodes and E edges where each edge has certain cost
    //    Graph *graph = new Graph();

    Global_Planner *planner = new Global_Planner();

    planner->~Global_Planner();

    return 0;
}
